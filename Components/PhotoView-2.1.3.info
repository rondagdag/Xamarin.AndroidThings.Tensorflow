{"Name":"Photo View","Id":3586,"Alias":"PhotoView","Description":"\n`PhotoView` aims to help produce an easily usable implementation of a zooming \nAndroid `ImageView`.\n\n## Features\n\n- Out of the box zooming, using multi-touch and double-tap.\n- Scrolling, with smooth scrolling fling.\n- Works perfectly when using used in a scrolling parent (such as `ViewPager`).\n- Allows the application to be notified when the displayed Matrix has changed. \n  Useful for when you need to update your UI based on the current zoom/scroll position.\n- Allows the application to be notified when the user taps on the Photo.\n\n## Usage\n\nThe `PhotoViewAttacher` type provides an easy means to attach the features of \n`PhotoView` to any `ImageView` instance:\n\n\t// any implementation of ImageView can be used!\n\tvar image = FindViewById\u003cImageView\u003e(Resource.Id.image);\n\t\n\t// set the Drawable displayed\n\tvar bitmap = BitmapFactory.DecodeResource(\n        Resources, Resource.Drawable.wallpaper);\n    image.SetImageBitmap(bitmap);\n\n\t// attach a PhotoViewAttacher, which takes care \n    // of all of the zooming functionality.\n\tvar attacher = new PhotoViewAttacher(image);\n\n    // . . . \n\n    // update the image\n    image.SetImageBitmap(newBitmap);\n\n    // update the attachment\n    attacher.Update();\n\nIn addition to using the `PhotoViewAttacher` type, we can use the `PhotoView`\ntype directly:\n\n    var photo = new PhotoView(this);\n    photo.SetImageBitmap(newBitmap);\n    \nAnd the `PhotoView` type can also be created in layout resources:\n\n    \u003cuk.co.senab.photoview.PhotoView\n        android:id=\"@+id/imageView\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\" /\u003e\n","Version":"2.1.3","Summary":"PhotoView aims to help produce an easily usable implementation of a zooming Android ImageView.","QuickStart":"\n`PhotoView` aims to help produce an easily usable implementation of a zooming \nAndroid `ImageView`.\n\n## Features\n\n- Out of the box zooming, using multi-touch and double-tap.\n- Scrolling, with smooth scrolling fling.\n- Works perfectly when using used in a scrolling parent (such as `ViewPager`).\n- Allows the application to be notified when the displayed Matrix has changed. \n  Useful for when you need to update your UI based on the current zoom/scroll position.\n- Allows the application to be notified when the user taps on the Photo.\n\n## Usage\n\nThe `PhotoViewAttacher` type provides an easy means to attach the features of \n`PhotoView` to any `ImageView` instance:\n\n\t// any implementation of ImageView can be used!\n\tvar image = FindViewById\u003cImageView\u003e(Resource.Id.image);\n\t\n\t// set the Drawable displayed\n\tvar bitmap = BitmapFactory.DecodeResource(\n        Resources, Resource.Drawable.wallpaper);\n    image.SetImageBitmap(bitmap);\n\n\t// attach a PhotoViewAttacher, which takes care \n    // of all of the zooming functionality.\n\tvar attacher = new PhotoViewAttacher(image);\n\n    // . . . \n\n    // update the image\n    image.SetImageBitmap(newBitmap);\n\n    // update the attachment\n    attacher.Update();\n\nIn addition to using the `PhotoViewAttacher` type, we can use the `PhotoView`\ntype directly:\n\n    var photo = new PhotoView(this);\n    photo.SetImageBitmap(newBitmap);\n    \nAnd the `PhotoView` type can also be created in layout resources:\n\n    \u003cuk.co.senab.photoview.PhotoView\n        android:id=\"@+id/imageView\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\" /\u003e\n","Hash":"b2931f7f02ae6b8cc6c762c16e416d97","TargetPlatforms":["android"],"TrialHash":null}